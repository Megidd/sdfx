package render

import (
	"bufio"
	"fmt"
	"os"
	"sync"
	"time"
)

//-----------------------------------------------------------------------------

// Define the ABAQUS or CalculiX inp file requirements, if any.

//-----------------------------------------------------------------------------

// writeFE writes a stream of finite elements in the shape of tetrahedra to an ABAQUS or CalculiX `inp` file.
func writeFE(wg *sync.WaitGroup, path string) (chan<- []*Tetrahedron, error) {
	f, err := os.Create(path)
	if err != nil {
		return nil, err
	}

	// Use buffered IO for optimal IO writes.
	// The default buffer size doesn't appear to limit performance.
	buf := bufio.NewWriter(f)

	_, err = f.WriteString("**\n** Structure: finite elements of a 3D model.\n** Generated by: https://github.com/deadsy/sdfx\n**\n")
	if err != nil {
		return nil, err
	}

	_, err = f.WriteString("*HEADING\nModel: 3D model Date: " + time.Now().UTC().Format("2006-Jan-02 MST") + "\n")
	if err != nil {
		return nil, err
	}

	// External code writes tetrahedra to this channel.
	// This goroutine reads the channel and writes tetrahedra to the file.
	c := make(chan []*Tetrahedron)

	wg.Add(1)
	go func() {
		defer wg.Done()
		defer f.Close()

		_, err = f.WriteString("*NODE\n")
		if err != nil {
			fmt.Printf("%s\n", err)
			return
		}

		var nodeCount uint32 = 1 // Right, starts with 1
		var tetCount uint32 = 0  //

		// read tetrahedra from the channel and write them to the file
		for ts := range c {
			for _, t := range ts {
				_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", nodeCount, float32(t.V[0].X), float32(t.V[0].Y), float32(t.V[0].Z)))
				if err != nil {
					fmt.Printf("%s\n", err)
					return
				}
				nodeCount++
				_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", nodeCount, float32(t.V[1].X), float32(t.V[1].Y), float32(t.V[1].Z)))
				if err != nil {
					fmt.Printf("%s\n", err)
					return
				}
				nodeCount++
				_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", nodeCount, float32(t.V[2].X), float32(t.V[2].Y), float32(t.V[2].Z)))
				if err != nil {
					fmt.Printf("%s\n", err)
					return
				}
				nodeCount++
				_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", nodeCount, float32(t.V[2].X), float32(t.V[2].Y), float32(t.V[2].Z)))
				if err != nil {
					fmt.Printf("%s\n", err)
					return
				}
				nodeCount++
				tetCount++
			}
		}

		_, err = f.WriteString("*ELEMENT, TYPE=C3D4\n")
		if err != nil {
			fmt.Printf("%s\n", err)
			return
		}

		inc := func(i *uint32) uint32 { *i++; return *i }

		var eleId uint32 = 1 // Right, start with 1
		var nodeIdx uint32 = 0

		for i := 0; i < int(tetCount); i++ {
			_, err = f.WriteString(fmt.Sprintf("%d,%d,%d,%d,%d\n", eleId, inc(&nodeIdx), inc(&nodeIdx), inc(&nodeIdx), inc(&nodeIdx)))
			if err != nil {
				fmt.Printf("%s\n", err)
				return
			}
			eleId++
		}

		// flush the tetrahedra
		buf.Flush()
	}()

	return c, nil
}
