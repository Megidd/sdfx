package render

import (
	"fmt"
	"os"
	"sync"
	"time"

	"github.com/deadsy/sdfx/render/buffer"
	"github.com/deadsy/sdfx/sdf"
	v3 "github.com/deadsy/sdfx/vec/v3"
)

// Hex8 is a 3D hexahedron consisting of 8 nodes.
// It's a kind of finite element, FE.
// https://en.wikipedia.org/wiki/Hexahedron
type Hex8 struct {
	// Coordinates of 8 corner nodes or vertices.
	V [8]v3.Vec
	// The layer to which tetrahedron belongs. Layers are along Z axis.
	// For finite element analysis - FEA - of 3D printed objects, it's more efficient to store layer along Z axis.
	// The 3D print is done along the Z axis. Likewise, FEA is done along the Z axis.
	// Sampling/marching algorithm is expected to return the layer to which a finite element belongs.
	layer int
}

//-----------------------------------------------------------------------------

// A mesh of 8-node hexahedra.
// A sophisticated data structure for mesh is required.
// The repeated nodes would be removed.
// The element connectivity would be created with unique nodes.
type MeshHex8 struct {
	// Index buffer.
	IBuff *buffer.Hex8IB
	// Vertex buffer.
	VBuff *buffer.Tet4VB
}

// To get a new mesh and number of its layers along Z-axis.
func NewMeshHex8(s sdf.SDF3, r RenderHex8) (*MeshHex8, int) {
	hex8s := ToHex8(s, r)

	_, _, layerCountZ := r.LayerCounts(s)

	m := newMeshHex8(layerCountZ)

	// Fill out the mesh with finite elements.
	for _, t := range hex8s {
		m.addFE(t.layer, t.V[0], t.V[1], t.V[2], t.V[3], t.V[4], t.V[5], t.V[6], t.V[7])
	}

	defer m.VBuff.DestroyHashTable()

	return m, layerCountZ
}

func newMeshHex8(layerCount int) *MeshHex8 {
	return &MeshHex8{
		IBuff: buffer.NewHex8IB(layerCount),
		VBuff: buffer.NewTet4VB(),
	}
}

// Add a finite element to mesh.
// Layer number and nodes are input.
// The node numbering should follow the convention of CalculiX.
// http://www.dhondt.de/ccx_2.20.pdf
func (m *MeshHex8) addFE(l int, n0, n1, n2, n3, n4, n5, n6, n7 v3.Vec) {
	m.IBuff.AddFE(l, m.addVertex(n0), m.addVertex(n1), m.addVertex(n2), m.addVertex(n3), m.addVertex(n4), m.addVertex(n5), m.addVertex(n6), m.addVertex(n7))
}

func (m *MeshHex8) addVertex(vert v3.Vec) uint32 {
	return m.VBuff.Id(vert)
}

func (m *MeshHex8) vertexCount() int {
	return m.VBuff.VertexCount()
}

func (m *MeshHex8) vertex(i uint32) v3.Vec {
	return m.VBuff.Vertex(i)
}

// Number of layers along the Z axis.
func (m *MeshHex8) layerCount() int {
	return m.IBuff.LayerCount()
}

// Number of finite elements on a layer.
func (m *MeshHex8) FECountOnLayer(l int) int {
	return m.IBuff.FECountOnLayer(l)
}

// Number of finite elements for all layers.
func (m *MeshHex8) FECount() int {
	return m.IBuff.FECount()
}

// Get a finite element.
// Layer number is input.
// FE index on layer is input.
// FE index could be from 0 to number of tetrahedra on layer.
// Don't return error to increase performance.
func (m *MeshHex8) FEIndicies(l, i int) (uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint32) {
	return m.IBuff.FEIndicies(l, i)
}

// Get a finite element.
// Layer number is input.
// FE index on layer is input.
// FE index could be from 0 to number of tetrahedra on layer.
// Don't return error to increase performance.
func (m *MeshHex8) FEVertices(l, i int) (v3.Vec, v3.Vec, v3.Vec, v3.Vec, v3.Vec, v3.Vec, v3.Vec, v3.Vec) {
	idx0, idx1, idx2, idx3, idx4, idx5, idx6, idx7 := m.IBuff.FEIndicies(l, i)
	return m.VBuff.Vertex(idx0), m.VBuff.Vertex(idx1), m.VBuff.Vertex(idx2), m.VBuff.Vertex(idx3),
		m.VBuff.Vertex(idx4), m.VBuff.Vertex(idx5), m.VBuff.Vertex(idx6), m.VBuff.Vertex(idx7)
}

// Write mesh to ABAQUS or CalculiX `inp` file.
func (m *MeshHex8) WriteInp(path string) error {
	return m.WriteInpLayers(path, 0, m.layerCount())
}

// Write specific layers of mesh to ABAQUS or CalculiX `inp` file.
// Result would include start layer.
// Result would exclude end layer.
func (m *MeshHex8) WriteInpLayers(path string, layerStart, layerEnd int) error {
	if 0 <= layerStart && layerStart < layerEnd && layerEnd <= m.layerCount() {
		// Good.
	} else {
		return fmt.Errorf("start or end layer is beyond range")
	}

	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	// Write headers.

	_, err = f.WriteString("**\n** Structure: finite elements of a 3D model.\n** Generated by: https://github.com/deadsy/sdfx\n**\n")
	if err != nil {
		return err
	}

	_, err = f.WriteString("*HEADING\nModel: 3D model Date: " + time.Now().UTC().Format("2006-Jan-02 MST") + "\n")
	if err != nil {
		return err
	}

	// Write nodes.

	_, err = f.WriteString("*NODE\n")
	if err != nil {
		return err
	}

	// To write only required nodes to the file.
	tempVBuff := buffer.NewTet4VB()
	defer tempVBuff.DestroyHashTable()

	var node0, node1, node2, node3, node4, node5, node6, node7 v3.Vec
	var id0, id1, id2, id3, id4, id5, id6, id7 uint32
	for l := layerStart; l < layerEnd; l++ {
		for i := 0; i < m.FECountOnLayer(l); i++ {
			node0, node1, node2, node3, node4, node5, node6, node7 = m.FEVertices(l, i)
			// Get the node IDs.
			id0 = tempVBuff.Id(node0)
			id1 = tempVBuff.Id(node1)
			id2 = tempVBuff.Id(node2)
			id3 = tempVBuff.Id(node3)
			id4 = tempVBuff.Id(node4)
			id5 = tempVBuff.Id(node5)
			id6 = tempVBuff.Id(node6)
			id7 = tempVBuff.Id(node7)
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id0+1, float32(node0.X), float32(node0.Y), float32(node0.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id1+1, float32(node1.X), float32(node1.Y), float32(node1.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id2+1, float32(node2.X), float32(node2.Y), float32(node2.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id3+1, float32(node3.X), float32(node3.Y), float32(node3.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id4+1, float32(node4.X), float32(node4.Y), float32(node4.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id5+1, float32(node5.X), float32(node5.Y), float32(node5.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id6+1, float32(node6.X), float32(node6.Y), float32(node6.Z)))
			if err != nil {
				return err
			}
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%f,%f,%f\n", id7+1, float32(node7.X), float32(node7.Y), float32(node7.Z)))
			if err != nil {
				return err
			}
		}
	}

	// Write elements.

	_, err = f.WriteString("*ELEMENT, TYPE=C3D8, ELSET=Eall\n")
	if err != nil {
		return err
	}

	var eleID uint32
	for l := layerStart; l < layerEnd; l++ {
		for i := 0; i < m.FECountOnLayer(l); i++ {
			node0, node1, node2, node3, node4, node5, node6, node7 = m.FEVertices(l, i)
			id0 = tempVBuff.Id(node0)
			id1 = tempVBuff.Id(node1)
			id2 = tempVBuff.Id(node2)
			id3 = tempVBuff.Id(node3)
			id4 = tempVBuff.Id(node4)
			id5 = tempVBuff.Id(node5)
			id6 = tempVBuff.Id(node6)
			id7 = tempVBuff.Id(node7)
			// ID starts from one not zero.
			_, err = f.WriteString(fmt.Sprintf("%d,%d,%d,%d,%d,%d,%d,%d,%d\n", eleID+1, id0+1, id1+1, id2+1, id3+1, id4+1, id5+1, id6+1, id7+1))
			if err != nil {
				return err
			}
			eleID++
		}
	}

	return nil
}

//-----------------------------------------------------------------------------

// writeHex8 writes a stream of finite elements, in the shape of 8-node hexahedra, to an array.
func writeHex8(wg *sync.WaitGroup, hex8s *[]Hex8) chan<- []*Hex8 {
	// External code writes tetrahedra to this channel.
	// This goroutine reads the channel and stores tetrahedra.
	c := make(chan []*Hex8)

	wg.Add(1)
	go func() {
		defer wg.Done()
		// read finite elements from the channel and handle them
		for ts := range c {
			for _, t := range ts {
				*hex8s = append(*hex8s, *t)
			}
		}
	}()

	return c
}

//-----------------------------------------------------------------------------
